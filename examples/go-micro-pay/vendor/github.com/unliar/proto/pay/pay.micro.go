// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pay.proto

/*
Package pay is a generated protocol buffer package.

It is generated from these files:
	pay.proto

It has these top-level messages:
	PayInfo
	ResponseStatus
*/
package pay

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PaySV service

type PaySVService interface {
	// 获取用户账户支付信息
	GetPayInfo(ctx context.Context, in *PayInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 创建用户账户支付信息
	PostPayInfo(ctx context.Context, in *PayInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 更新用户账户支付信息
	UpdatePayInfo(ctx context.Context, in *PayInfo, opts ...client.CallOption) (*ResponseStatus, error)
}

type paySVService struct {
	c    client.Client
	name string
}

func NewPaySVService(name string, c client.Client) PaySVService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pay"
	}
	return &paySVService{
		c:    c,
		name: name,
	}
}

func (c *paySVService) GetPayInfo(ctx context.Context, in *PayInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "PaySV.GetPayInfo", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paySVService) PostPayInfo(ctx context.Context, in *PayInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "PaySV.PostPayInfo", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paySVService) UpdatePayInfo(ctx context.Context, in *PayInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "PaySV.UpdatePayInfo", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaySV service

type PaySVHandler interface {
	// 获取用户账户支付信息
	GetPayInfo(context.Context, *PayInfo, *ResponseStatus) error
	// 创建用户账户支付信息
	PostPayInfo(context.Context, *PayInfo, *ResponseStatus) error
	// 更新用户账户支付信息
	UpdatePayInfo(context.Context, *PayInfo, *ResponseStatus) error
}

func RegisterPaySVHandler(s server.Server, hdlr PaySVHandler, opts ...server.HandlerOption) error {
	type paySV interface {
		GetPayInfo(ctx context.Context, in *PayInfo, out *ResponseStatus) error
		PostPayInfo(ctx context.Context, in *PayInfo, out *ResponseStatus) error
		UpdatePayInfo(ctx context.Context, in *PayInfo, out *ResponseStatus) error
	}
	type PaySV struct {
		paySV
	}
	h := &paySVHandler{hdlr}
	return s.Handle(s.NewHandler(&PaySV{h}, opts...))
}

type paySVHandler struct {
	PaySVHandler
}

func (h *paySVHandler) GetPayInfo(ctx context.Context, in *PayInfo, out *ResponseStatus) error {
	return h.PaySVHandler.GetPayInfo(ctx, in, out)
}

func (h *paySVHandler) PostPayInfo(ctx context.Context, in *PayInfo, out *ResponseStatus) error {
	return h.PaySVHandler.PostPayInfo(ctx, in, out)
}

func (h *paySVHandler) UpdatePayInfo(ctx context.Context, in *PayInfo, out *ResponseStatus) error {
	return h.PaySVHandler.UpdatePayInfo(ctx, in, out)
}
