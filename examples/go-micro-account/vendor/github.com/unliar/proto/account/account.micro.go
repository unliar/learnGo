// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account.proto

It has these top-level messages:
	UserInfo
	UserSecretInfo
	UserPasswordInfo
	UserInfoWithToken
	UIDInput
	ResponseStatus
	PasswordInput
	RegisterInfo
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountSV service

type AccountSVService interface {
	// 查询用户基础信息 2019-01-02 done
	GetUserInfo(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserInfo, error)
	//  根据登录名称查询用户信息
	GetUserInfoByLoginName(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error)
	// 通过token获取用户信息  2019-01-02 done
	GetUserInfoByToken(ctx context.Context, in *UserInfoWithToken, opts ...client.CallOption) (*UserInfo, error)
	// 创建用户基础信息 2019-01-05 will not to do
	PostUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 更新用户信息
	UpdateUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 获取用户合法的token
	GetToken(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfoWithToken, error)
	// 检查用户Token是否合法
	CheckToken(ctx context.Context, in *UserInfoWithToken, opts ...client.CallOption) (*ResponseStatus, error)
	// 检查用户名是否被使用
	CheckLoginName(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 检查手机是否被绑定
	CheckPhone(ctx context.Context, in *UserSecretInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 检查昵称是否被使用
	CheckNickname(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 更新用户密码
	UpdatePassword(ctx context.Context, in *UserPasswordInfo, opts ...client.CallOption) (*ResponseStatus, error)
	// 用户登录
	CheckPassword(ctx context.Context, in *PasswordInput, opts ...client.CallOption) (*UserInfoWithToken, error)
	// 用户注册
	RegisterUserByPassword(ctx context.Context, in *RegisterInfo, opts ...client.CallOption) (*UserInfo, error)
	// 获取用户的修改密码时间
	GetUserPasswordUpdatedTime(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserPasswordInfo, error)
	// 根据用户私密信息查询用户id
	GetUserUIDByUserSecretInfo(ctx context.Context, in *UserSecretInfo, opts ...client.CallOption) (*UIDInput, error)
	// 根据用户私密信息查询用户公开信息
	GetUserInfoByUserSecretInfo(ctx context.Context, in *UserSecretInfo, opts ...client.CallOption) (*UserInfo, error)
}

type accountSVService struct {
	c    client.Client
	name string
}

func NewAccountSVService(name string, c client.Client) AccountSVService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &accountSVService{
		c:    c,
		name: name,
	}
}

func (c *accountSVService) GetUserInfo(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserInfoByLoginName(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserInfoByLoginName", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserInfoByToken(ctx context.Context, in *UserInfoWithToken, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserInfoByToken", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) PostUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.PostUserInfo", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) UpdateUserInfo(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.UpdateUserInfo", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetToken(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*UserInfoWithToken, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetToken", in)
	out := new(UserInfoWithToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckToken(ctx context.Context, in *UserInfoWithToken, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckToken", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckLoginName(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckLoginName", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckPhone(ctx context.Context, in *UserSecretInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckPhone", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckNickname(ctx context.Context, in *UserInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckNickname", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) UpdatePassword(ctx context.Context, in *UserPasswordInfo, opts ...client.CallOption) (*ResponseStatus, error) {
	req := c.c.NewRequest(c.name, "AccountSV.UpdatePassword", in)
	out := new(ResponseStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) CheckPassword(ctx context.Context, in *PasswordInput, opts ...client.CallOption) (*UserInfoWithToken, error) {
	req := c.c.NewRequest(c.name, "AccountSV.CheckPassword", in)
	out := new(UserInfoWithToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) RegisterUserByPassword(ctx context.Context, in *RegisterInfo, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.RegisterUserByPassword", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserPasswordUpdatedTime(ctx context.Context, in *UIDInput, opts ...client.CallOption) (*UserPasswordInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserPasswordUpdatedTime", in)
	out := new(UserPasswordInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserUIDByUserSecretInfo(ctx context.Context, in *UserSecretInfo, opts ...client.CallOption) (*UIDInput, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserUIDByUserSecretInfo", in)
	out := new(UIDInput)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserInfoByUserSecretInfo(ctx context.Context, in *UserSecretInfo, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserInfoByUserSecretInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountSV service

type AccountSVHandler interface {
	// 查询用户基础信息 2019-01-02 done
	GetUserInfo(context.Context, *UIDInput, *UserInfo) error
	//  根据登录名称查询用户信息
	GetUserInfoByLoginName(context.Context, *UserInfo, *UserInfo) error
	// 通过token获取用户信息  2019-01-02 done
	GetUserInfoByToken(context.Context, *UserInfoWithToken, *UserInfo) error
	// 创建用户基础信息 2019-01-05 will not to do
	PostUserInfo(context.Context, *UserInfo, *ResponseStatus) error
	// 更新用户信息
	UpdateUserInfo(context.Context, *UserInfo, *ResponseStatus) error
	// 获取用户合法的token
	GetToken(context.Context, *UserInfo, *UserInfoWithToken) error
	// 检查用户Token是否合法
	CheckToken(context.Context, *UserInfoWithToken, *ResponseStatus) error
	// 检查用户名是否被使用
	CheckLoginName(context.Context, *UserInfo, *ResponseStatus) error
	// 检查手机是否被绑定
	CheckPhone(context.Context, *UserSecretInfo, *ResponseStatus) error
	// 检查昵称是否被使用
	CheckNickname(context.Context, *UserInfo, *ResponseStatus) error
	// 更新用户密码
	UpdatePassword(context.Context, *UserPasswordInfo, *ResponseStatus) error
	// 用户登录
	CheckPassword(context.Context, *PasswordInput, *UserInfoWithToken) error
	// 用户注册
	RegisterUserByPassword(context.Context, *RegisterInfo, *UserInfo) error
	// 获取用户的修改密码时间
	GetUserPasswordUpdatedTime(context.Context, *UIDInput, *UserPasswordInfo) error
	// 根据用户私密信息查询用户id
	GetUserUIDByUserSecretInfo(context.Context, *UserSecretInfo, *UIDInput) error
	// 根据用户私密信息查询用户公开信息
	GetUserInfoByUserSecretInfo(context.Context, *UserSecretInfo, *UserInfo) error
}

func RegisterAccountSVHandler(s server.Server, hdlr AccountSVHandler, opts ...server.HandlerOption) error {
	type accountSV interface {
		GetUserInfo(ctx context.Context, in *UIDInput, out *UserInfo) error
		GetUserInfoByLoginName(ctx context.Context, in *UserInfo, out *UserInfo) error
		GetUserInfoByToken(ctx context.Context, in *UserInfoWithToken, out *UserInfo) error
		PostUserInfo(ctx context.Context, in *UserInfo, out *ResponseStatus) error
		UpdateUserInfo(ctx context.Context, in *UserInfo, out *ResponseStatus) error
		GetToken(ctx context.Context, in *UserInfo, out *UserInfoWithToken) error
		CheckToken(ctx context.Context, in *UserInfoWithToken, out *ResponseStatus) error
		CheckLoginName(ctx context.Context, in *UserInfo, out *ResponseStatus) error
		CheckPhone(ctx context.Context, in *UserSecretInfo, out *ResponseStatus) error
		CheckNickname(ctx context.Context, in *UserInfo, out *ResponseStatus) error
		UpdatePassword(ctx context.Context, in *UserPasswordInfo, out *ResponseStatus) error
		CheckPassword(ctx context.Context, in *PasswordInput, out *UserInfoWithToken) error
		RegisterUserByPassword(ctx context.Context, in *RegisterInfo, out *UserInfo) error
		GetUserPasswordUpdatedTime(ctx context.Context, in *UIDInput, out *UserPasswordInfo) error
		GetUserUIDByUserSecretInfo(ctx context.Context, in *UserSecretInfo, out *UIDInput) error
		GetUserInfoByUserSecretInfo(ctx context.Context, in *UserSecretInfo, out *UserInfo) error
	}
	type AccountSV struct {
		accountSV
	}
	h := &accountSVHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountSV{h}, opts...))
}

type accountSVHandler struct {
	AccountSVHandler
}

func (h *accountSVHandler) GetUserInfo(ctx context.Context, in *UIDInput, out *UserInfo) error {
	return h.AccountSVHandler.GetUserInfo(ctx, in, out)
}

func (h *accountSVHandler) GetUserInfoByLoginName(ctx context.Context, in *UserInfo, out *UserInfo) error {
	return h.AccountSVHandler.GetUserInfoByLoginName(ctx, in, out)
}

func (h *accountSVHandler) GetUserInfoByToken(ctx context.Context, in *UserInfoWithToken, out *UserInfo) error {
	return h.AccountSVHandler.GetUserInfoByToken(ctx, in, out)
}

func (h *accountSVHandler) PostUserInfo(ctx context.Context, in *UserInfo, out *ResponseStatus) error {
	return h.AccountSVHandler.PostUserInfo(ctx, in, out)
}

func (h *accountSVHandler) UpdateUserInfo(ctx context.Context, in *UserInfo, out *ResponseStatus) error {
	return h.AccountSVHandler.UpdateUserInfo(ctx, in, out)
}

func (h *accountSVHandler) GetToken(ctx context.Context, in *UserInfo, out *UserInfoWithToken) error {
	return h.AccountSVHandler.GetToken(ctx, in, out)
}

func (h *accountSVHandler) CheckToken(ctx context.Context, in *UserInfoWithToken, out *ResponseStatus) error {
	return h.AccountSVHandler.CheckToken(ctx, in, out)
}

func (h *accountSVHandler) CheckLoginName(ctx context.Context, in *UserInfo, out *ResponseStatus) error {
	return h.AccountSVHandler.CheckLoginName(ctx, in, out)
}

func (h *accountSVHandler) CheckPhone(ctx context.Context, in *UserSecretInfo, out *ResponseStatus) error {
	return h.AccountSVHandler.CheckPhone(ctx, in, out)
}

func (h *accountSVHandler) CheckNickname(ctx context.Context, in *UserInfo, out *ResponseStatus) error {
	return h.AccountSVHandler.CheckNickname(ctx, in, out)
}

func (h *accountSVHandler) UpdatePassword(ctx context.Context, in *UserPasswordInfo, out *ResponseStatus) error {
	return h.AccountSVHandler.UpdatePassword(ctx, in, out)
}

func (h *accountSVHandler) CheckPassword(ctx context.Context, in *PasswordInput, out *UserInfoWithToken) error {
	return h.AccountSVHandler.CheckPassword(ctx, in, out)
}

func (h *accountSVHandler) RegisterUserByPassword(ctx context.Context, in *RegisterInfo, out *UserInfo) error {
	return h.AccountSVHandler.RegisterUserByPassword(ctx, in, out)
}

func (h *accountSVHandler) GetUserPasswordUpdatedTime(ctx context.Context, in *UIDInput, out *UserPasswordInfo) error {
	return h.AccountSVHandler.GetUserPasswordUpdatedTime(ctx, in, out)
}

func (h *accountSVHandler) GetUserUIDByUserSecretInfo(ctx context.Context, in *UserSecretInfo, out *UIDInput) error {
	return h.AccountSVHandler.GetUserUIDByUserSecretInfo(ctx, in, out)
}

func (h *accountSVHandler) GetUserInfoByUserSecretInfo(ctx context.Context, in *UserSecretInfo, out *UserInfo) error {
	return h.AccountSVHandler.GetUserInfoByUserSecretInfo(ctx, in, out)
}
