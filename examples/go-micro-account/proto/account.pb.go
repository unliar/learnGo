// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account.proto

It has these top-level messages:
	UserBase
	UserContact
	UserInfo
	UserId
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 用户基础信息
type UserBase struct {
	Id         int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	LoginName  string `protobuf:"bytes,2,opt,name=LoginName,json=loginName" json:"LoginName,omitempty"`
	IDC        string `protobuf:"bytes,3,opt,name=IDC,json=iDC" json:"IDC,omitempty"`
	Nickname   string `protobuf:"bytes,4,opt,name=Nickname,json=nickname" json:"Nickname,omitempty"`
	Age        int64  `protobuf:"varint,5,opt,name=Age,json=age" json:"Age,omitempty"`
	Male       string `protobuf:"bytes,6,opt,name=Male,json=male" json:"Male,omitempty"`
	Avatar     string `protobuf:"bytes,7,opt,name=Avatar,json=avatar" json:"Avatar,omitempty"`
	Location   string `protobuf:"bytes,8,opt,name=Location,json=location" json:"Location,omitempty"`
	Profession string `protobuf:"bytes,9,opt,name=Profession,json=profession" json:"Profession,omitempty"`
	Status     int64  `protobuf:"varint,10,opt,name=Status,json=status" json:"Status,omitempty"`
	CreateTime string `protobuf:"bytes,11,opt,name=CreateTime,json=createTime" json:"CreateTime,omitempty"`
}

func (m *UserBase) Reset()                    { *m = UserBase{} }
func (m *UserBase) String() string            { return proto.CompactTextString(m) }
func (*UserBase) ProtoMessage()               {}
func (*UserBase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserBase) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserBase) GetLoginName() string {
	if m != nil {
		return m.LoginName
	}
	return ""
}

func (m *UserBase) GetIDC() string {
	if m != nil {
		return m.IDC
	}
	return ""
}

func (m *UserBase) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserBase) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UserBase) GetMale() string {
	if m != nil {
		return m.Male
	}
	return ""
}

func (m *UserBase) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserBase) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *UserBase) GetProfession() string {
	if m != nil {
		return m.Profession
	}
	return ""
}

func (m *UserBase) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserBase) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

type UserContact struct {
	Id       int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email,omitempty"`
	Phone    string `protobuf:"bytes,3,opt,name=Phone,json=phone" json:"Phone,omitempty"`
	WeChatId string `protobuf:"bytes,4,opt,name=WeChatId,json=weChatId" json:"WeChatId,omitempty"`
	WeiBoId  string `protobuf:"bytes,5,opt,name=WeiBoId,json=weiBoId" json:"WeiBoId,omitempty"`
	QQId     string `protobuf:"bytes,6,opt,name=QQId,json=qQId" json:"QQId,omitempty"`
}

func (m *UserContact) Reset()                    { *m = UserContact{} }
func (m *UserContact) String() string            { return proto.CompactTextString(m) }
func (*UserContact) ProtoMessage()               {}
func (*UserContact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserContact) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserContact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserContact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserContact) GetWeChatId() string {
	if m != nil {
		return m.WeChatId
	}
	return ""
}

func (m *UserContact) GetWeiBoId() string {
	if m != nil {
		return m.WeiBoId
	}
	return ""
}

func (m *UserContact) GetQQId() string {
	if m != nil {
		return m.QQId
	}
	return ""
}

// 用户信息
type UserInfo struct {
	Base    *UserBase    `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Contact *UserContact `protobuf:"bytes,2,opt,name=contact" json:"contact,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserInfo) GetBase() *UserBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserInfo) GetContact() *UserContact {
	if m != nil {
		return m.Contact
	}
	return nil
}

// id查询用户信息
type UserId struct {
	UID int64 `protobuf:"varint,1,opt,name=UID,json=uID" json:"UID,omitempty"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserId) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func init() {
	proto.RegisterType((*UserBase)(nil), "account.UserBase")
	proto.RegisterType((*UserContact)(nil), "account.UserContact")
	proto.RegisterType((*UserInfo)(nil), "account.UserInfo")
	proto.RegisterType((*UserId)(nil), "account.UserId")
}

func init() { proto.RegisterFile("account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x45, 0x96, 0x2d, 0x59, 0x23, 0x9a, 0xb6, 0x4b, 0x28, 0x8b, 0x29, 0x25, 0x18, 0x0a, 0x39,
	0x19, 0xea, 0x1e, 0x7a, 0x76, 0xe4, 0x52, 0x16, 0xd2, 0x10, 0x2b, 0x4d, 0x73, 0x9e, 0x48, 0x13,
	0x47, 0x54, 0xde, 0x75, 0xa5, 0x75, 0xf3, 0x21, 0xbd, 0xf4, 0x1b, 0xfa, 0x95, 0x65, 0x47, 0x2b,
	0x17, 0xe3, 0x42, 0x8f, 0xef, 0xcd, 0x7b, 0xb3, 0x33, 0x6f, 0x16, 0x9e, 0x61, 0x51, 0x98, 0x9d,
	0xb6, 0xb3, 0x6d, 0x63, 0xac, 0x11, 0xb1, 0x87, 0xd3, 0x5f, 0x03, 0x18, 0xdf, 0xb6, 0xd4, 0x5c,
	0x60, 0x4b, 0xe2, 0x04, 0x06, 0xaa, 0x94, 0xc1, 0x59, 0x70, 0x1e, 0xe6, 0x83, 0xaa, 0x14, 0xaf,
	0x21, 0xb9, 0x34, 0xeb, 0x4a, 0x5f, 0xe1, 0x86, 0xe4, 0xe0, 0x2c, 0x38, 0x4f, 0xf2, 0xa4, 0xee,
	0x09, 0xf1, 0x02, 0x42, 0xb5, 0xcc, 0x64, 0xc8, 0x7c, 0x58, 0x2d, 0x33, 0x31, 0x81, 0xf1, 0x55,
	0x55, 0x7c, 0xd3, 0x4e, 0x3e, 0x64, 0x7a, 0xac, 0x3d, 0x76, 0xea, 0xc5, 0x9a, 0xe4, 0x88, 0x9b,
	0x87, 0xb8, 0x26, 0x21, 0x60, 0xf8, 0x19, 0x6b, 0x92, 0x11, 0x2b, 0x87, 0x1b, 0xac, 0x49, 0xbc,
	0x82, 0x68, 0xf1, 0x03, 0x2d, 0x36, 0x32, 0x66, 0x36, 0x42, 0x46, 0xae, 0xf3, 0xa5, 0x29, 0xd0,
	0x56, 0x46, 0xcb, 0x71, 0xd7, 0xb9, 0xf6, 0x58, 0xbc, 0x01, 0xb8, 0x6e, 0xcc, 0x03, 0xb5, 0xad,
	0xab, 0x26, 0x5c, 0x85, 0xed, 0x9e, 0x71, 0x3d, 0x6f, 0x2c, 0xda, 0x5d, 0x2b, 0x81, 0x1f, 0x8f,
	0x5a, 0x46, 0xce, 0x97, 0x35, 0x84, 0x96, 0xbe, 0x54, 0x1b, 0x92, 0x69, 0xe7, 0x2b, 0xf6, 0xcc,
	0xf4, 0x67, 0x00, 0xa9, 0x8b, 0x26, 0x33, 0xda, 0x62, 0x61, 0x8f, 0xd2, 0x39, 0x85, 0xd1, 0xc7,
	0x0d, 0x56, 0xb5, 0x4f, 0x66, 0x44, 0x0e, 0x38, 0xf6, 0xfa, 0xd1, 0x68, 0xf2, 0xb9, 0x8c, 0xb6,
	0x0e, 0xb8, 0xf9, 0xef, 0x28, 0x7b, 0x44, 0xab, 0xca, 0x3e, 0x99, 0x27, 0x8f, 0x85, 0x84, 0xf8,
	0x8e, 0xaa, 0x0b, 0xa3, 0x4a, 0x4e, 0x27, 0xc9, 0xe3, 0xa7, 0x0e, 0xba, 0x84, 0x56, 0x2b, 0x55,
	0xf6, 0x09, 0x7d, 0x5f, 0xa9, 0x72, 0x8a, 0xdd, 0xbd, 0x94, 0x7e, 0x30, 0xe2, 0x2d, 0x0c, 0xef,
	0xb1, 0x25, 0x9e, 0x29, 0x9d, 0xbf, 0x9c, 0xf5, 0x37, 0xee, 0x0f, 0x9a, 0x73, 0x59, 0xcc, 0x20,
	0x2e, 0xba, 0x1d, 0x78, 0xd4, 0x74, 0x7e, 0x7a, 0xa0, 0xf4, 0xfb, 0xe5, 0xbd, 0x68, 0x3a, 0x81,
	0x88, 0x9f, 0x28, 0xdd, 0xd1, 0x6e, 0xd5, 0xd2, 0xef, 0x1c, 0xee, 0xd4, 0x72, 0xfe, 0x3b, 0x80,
	0x64, 0xd1, 0x99, 0x6f, 0xbe, 0x8a, 0x77, 0x90, 0x7e, 0x22, 0xbb, 0x9f, 0xe7, 0xf9, 0x41, 0x5f,
	0x55, 0x4e, 0x0e, 0x47, 0x62, 0xcd, 0x5f, 0x0b, 0x7f, 0xb9, 0xff, 0x58, 0x58, 0xf3, 0x01, 0x4e,
	0xbc, 0xa5, 0x3f, 0xc5, 0x91, 0xeb, 0x9f, 0x1b, 0xdd, 0x47, 0xfc, 0xd9, 0xdf, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xd0, 0xbb, 0x3f, 0x16, 0xfd, 0x02, 0x00, 0x00,
}
