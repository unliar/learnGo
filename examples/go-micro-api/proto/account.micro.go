// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account.proto

It has these top-level messages:
	UserBase
	UserContact
	UserInfo
	UserId
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountSV service

type AccountSVService interface {
	// 查询用户基础信息和用户社交联系方式
	GetUserInfo(ctx context.Context, in *UserId, opts ...client.CallOption) (*UserInfo, error)
	// 查询用户基础信息
	GetUserBase(ctx context.Context, in *UserId, opts ...client.CallOption) (*UserBase, error)
	// 查询用户联系方式信息
	GetUserContact(ctx context.Context, in *UserId, opts ...client.CallOption) (*UserContact, error)
}

type accountSVService struct {
	c    client.Client
	name string
}

func NewAccountSVService(name string, c client.Client) AccountSVService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "account"
	}
	return &accountSVService{
		c:    c,
		name: name,
	}
}

func (c *accountSVService) GetUserInfo(ctx context.Context, in *UserId, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserBase(ctx context.Context, in *UserId, opts ...client.CallOption) (*UserBase, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserBase", in)
	out := new(UserBase)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSVService) GetUserContact(ctx context.Context, in *UserId, opts ...client.CallOption) (*UserContact, error) {
	req := c.c.NewRequest(c.name, "AccountSV.GetUserContact", in)
	out := new(UserContact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountSV service

type AccountSVHandler interface {
	// 查询用户基础信息和用户社交联系方式
	GetUserInfo(context.Context, *UserId, *UserInfo) error
	// 查询用户基础信息
	GetUserBase(context.Context, *UserId, *UserBase) error
	// 查询用户联系方式信息
	GetUserContact(context.Context, *UserId, *UserContact) error
}

func RegisterAccountSVHandler(s server.Server, hdlr AccountSVHandler, opts ...server.HandlerOption) error {
	type accountSV interface {
		GetUserInfo(ctx context.Context, in *UserId, out *UserInfo) error
		GetUserBase(ctx context.Context, in *UserId, out *UserBase) error
		GetUserContact(ctx context.Context, in *UserId, out *UserContact) error
	}
	type AccountSV struct {
		accountSV
	}
	h := &accountSVHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountSV{h}, opts...))
}

type accountSVHandler struct {
	AccountSVHandler
}

func (h *accountSVHandler) GetUserInfo(ctx context.Context, in *UserId, out *UserInfo) error {
	return h.AccountSVHandler.GetUserInfo(ctx, in, out)
}

func (h *accountSVHandler) GetUserBase(ctx context.Context, in *UserId, out *UserBase) error {
	return h.AccountSVHandler.GetUserBase(ctx, in, out)
}

func (h *accountSVHandler) GetUserContact(ctx context.Context, in *UserId, out *UserContact) error {
	return h.AccountSVHandler.GetUserContact(ctx, in, out)
}
